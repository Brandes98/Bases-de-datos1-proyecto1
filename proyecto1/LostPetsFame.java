/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto1;

import java.io.File;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import oracle.jdbc.OracleTypes;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 *
 * @author david
 */
public class LostPetsFame extends javax.swing.JFrame {

    /**
     * Creates new form LostPetsFame
     */
    public LostPetsFame() {
        initComponents();
        populateColorComboBox();
        populateSeverityComboBox();
        populateSicknessComboBox();
        populateEnergyLevelComboBox();
        populateTrainingDificultyComboBox();
        populatePetTypeComboBox();
        populatePetBreedComboBox();
        populateLostCountryComboBox();
        populateLostProvinceComboBox();
        populateFoundCountryComboBox();
        populateFoundProvinceComboBox();
        populateCurrencyComboBox();
    }
    
    // file chooser
    private File selectedLostPetPhotoFile = null;
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        petNameTF = new javax.swing.JTextField();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LnotesTF = new javax.swing.JTextArea();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        petColorCBOX = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        petSeverityCBOX = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        petEnergyCBOX = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        petTrainingCBOX = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        petChipTF = new javax.swing.JTextField();
        PetTypePanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel13 = new javax.swing.JLabel();
        petTypeCBOX = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel14 = new javax.swing.JLabel();
        petBreedCBOX = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        petLostDateJC = new com.toedter.calendar.JDateChooser();
        javax.swing.JLabel jLabel18 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel19 = new javax.swing.JLabel();
        petFoundDateLabel = new javax.swing.JLabel();
        javax.swing.JLabel jLabel20 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel21 = new javax.swing.JLabel();
        petLostCountryCBOX = new javax.swing.JComboBox<>();
        petFoundCountryCBOX = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel22 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel23 = new javax.swing.JLabel();
        petFindingRewardCurrencyCBOX = new javax.swing.JComboBox<>();
        LpetFindingRewardJSPINNER = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        petLostProvinceCBOX = new javax.swing.JComboBox<>();
        petFoundProvinceCBOX = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        petLostCantonCBOX = new javax.swing.JComboBox<>();
        petFoundCantonCBOX = new javax.swing.JComboBox<>();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        petLostDistrictCBOX = new javax.swing.JComboBox<>();
        petFoundDistrictCBOX = new javax.swing.JComboBox<>();
        petSubmitBTN = new javax.swing.JButton();
        returnHomeBTN = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        carnetTF = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        LostPetPhotoFC = new javax.swing.JFileChooser();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        petSicknessCBOX = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel15 = new javax.swing.JLabel();
        LpetSizeJSPINNER = new javax.swing.JSpinner();
        LpetNeededSpaceJSPINNER = new javax.swing.JSpinner();
        petSicknessTreatmentTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(204, 0, 0));

        jLabel1.setFont(new java.awt.Font("Segoe Print", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Lost Pet registration");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(60, 60, 60));
        jLabel2.setText("Pet name");

        petNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petNameTFActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(60, 60, 60));
        jLabel3.setText("Pet size in centimeters");

        jLabel4.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(60, 60, 60));
        jLabel4.setText("Pet needed space in meters");

        jLabel5.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(60, 60, 60));
        jLabel5.setText("Notes");

        LnotesTF.setColumns(20);
        LnotesTF.setRows(5);
        jScrollPane1.setViewportView(LnotesTF);

        jLabel6.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(60, 60, 60));
        jLabel6.setText("Pet color");

        petColorCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petColorCBOXActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(60, 60, 60));
        jLabel7.setText("Pet severity");

        petSeverityCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petSeverityCBOXActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(60, 60, 60));
        jLabel10.setText("Pet energy level");

        petEnergyCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petEnergyCBOXActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(60, 60, 60));
        jLabel11.setText("Pet training dificulty");

        petTrainingCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petTrainingCBOXActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(60, 60, 60));
        jLabel12.setText("Pet chip code");

        petChipTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petChipTFActionPerformed(evt);
            }
        });

        PetTypePanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel13.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(60, 60, 60));
        jLabel13.setText("Pet type");

        petTypeCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petTypeCBOXActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(60, 60, 60));
        jLabel14.setText("Pet breed");

        petBreedCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petBreedCBOXActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PetTypePanelLayout = new javax.swing.GroupLayout(PetTypePanel);
        PetTypePanel.setLayout(PetTypePanelLayout);
        PetTypePanelLayout.setHorizontalGroup(
            PetTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PetTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PetTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(petBreedCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(petTypeCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PetTypePanelLayout.setVerticalGroup(
            PetTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PetTypePanelLayout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(petTypeCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(petBreedCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel18.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(60, 60, 60));
        jLabel18.setText("Pet lost date");

        jLabel19.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(60, 60, 60));
        jLabel19.setText("Pet found date");

        petFoundDateLabel.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        petFoundDateLabel.setForeground(new java.awt.Color(255, 0, 51));
        petFoundDateLabel.setText("N/A");

        jLabel20.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(60, 60, 60));
        jLabel20.setText("Pet lost place");

        jLabel21.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(60, 60, 60));
        jLabel21.setText("Pet found place");

        petLostCountryCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petLostCountryCBOXActionPerformed(evt);
            }
        });

        petFoundCountryCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petFoundCountryCBOXActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(60, 60, 60));
        jLabel22.setText("Pet finding reward");

        jLabel23.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(60, 60, 60));
        jLabel23.setText("Finding reward currency");

        petFindingRewardCurrencyCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petFindingRewardCurrencyCBOXActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel17.setText("Country");

        jLabel24.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel24.setText("Country");

        jLabel25.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel25.setText("Province");

        jLabel26.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel26.setText("Province");

        petLostProvinceCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petLostProvinceCBOXActionPerformed(evt);
            }
        });

        petFoundProvinceCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petFoundProvinceCBOXActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel27.setText("Canton");

        jLabel28.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel28.setText("Canton");

        petLostCantonCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petLostCantonCBOXActionPerformed(evt);
            }
        });

        petFoundCantonCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petFoundCantonCBOXActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel29.setText("District");

        jLabel30.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel30.setText("District");

        petLostDistrictCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petLostDistrictCBOXActionPerformed(evt);
            }
        });

        petFoundDistrictCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petFoundDistrictCBOXActionPerformed(evt);
            }
        });

        petSubmitBTN.setBackground(new java.awt.Color(204, 0, 0));
        petSubmitBTN.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        petSubmitBTN.setForeground(new java.awt.Color(204, 204, 204));
        petSubmitBTN.setText("Submit");
        petSubmitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petSubmitBTNActionPerformed(evt);
            }
        });

        returnHomeBTN.setBackground(new java.awt.Color(204, 0, 0));
        returnHomeBTN.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        returnHomeBTN.setForeground(new java.awt.Color(204, 204, 204));
        returnHomeBTN.setText("Return home");
        returnHomeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnHomeBTNActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel31.setText("Carnet");

        carnetTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carnetTFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(petLostDistrictCBOX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(petLostCantonCBOX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(petLostProvinceCBOX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(petLostDateJC, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(petLostCountryCBOX, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                                                .addComponent(petFoundDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(carnetTF, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(petFoundCountryCBOX, 0, 185, Short.MAX_VALUE)
                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(petFoundProvinceCBOX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(petFoundCantonCBOX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(petFoundDistrictCBOX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LpetFindingRewardJSPINNER, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(petFindingRewardCurrencyCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(petSubmitBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnHomeBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel22))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(petLostDateJC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LpetFindingRewardJSPINNER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel23)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(petFoundDateLabel)
                    .addComponent(petFindingRewardCurrencyCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21))
                .addGap(32, 32, 32)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(petFoundCountryCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(petLostCountryCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(petLostProvinceCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(petFoundProvinceCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(petLostCantonCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(petFoundCantonCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(petLostDistrictCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(petFoundDistrictCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(petSubmitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carnetTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(returnHomeBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(439, Short.MAX_VALUE))
        );

        jLabel16.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(60, 60, 60));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        LostPetPhotoFC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LostPetPhotoFCActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(60, 60, 60));
        jLabel8.setText("Pet sickness*");

        petSicknessCBOX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petSicknessCBOXActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(60, 60, 60));
        jLabel9.setText("Pet sickness treatment*");

        jLabel15.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel15.setText("Pet photo");

        petSicknessTreatmentTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petSicknessTreatmentTFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(LpetNeededSpaceJSPINNER)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(petSeverityCBOX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(petColorCBOX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(petNameTF)
                                        .addComponent(LpetSizeJSPINNER, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(petTrainingCBOX, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(petChipTF, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                                            .addComponent(petEnergyCBOX, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(24, 24, 24)))
                                .addGap(542, 542, 542))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(PetTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(145, 145, 145)
                                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(petSicknessCBOX, 0, 185, Short.MAX_VALUE)
                                            .addComponent(petSicknessTreatmentTF))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(LostPetPhotoFC, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(petNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(petEnergyCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(petTrainingCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LpetSizeJSPINNER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(petChipTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LpetNeededSpaceJSPINNER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(petColorCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addGap(8, 8, 8)
                                .addComponent(petSeverityCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(PetTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel15))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(jLabel9))
                                    .addComponent(petSicknessCBOX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(petSicknessTreatmentTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LostPetPhotoFC, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public String getUsername() {
        String fileName = "user.txt"; // Name of the file in your project directory
        String user = null;

        try {
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            user = reader.readLine(); // Read the first line
            reader.close();
        } catch (IOException e) {
            // Handle any potential IOException here, e.g., show an error message.
            e.printStackTrace();
        }

        return user;
    }
    
    private void populateColorComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT COLOR FROM COLOR";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("COLOR"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petColorCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateSeverityComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT GRADE FROM SEVERITY";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("GRADE"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petSeverityCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    
    private void populateSicknessComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT SICKNESS FROM SICKNESS";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("SICKNESS"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petSicknessCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateEnergyLevelComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT ENERGYLEVEL FROM ENERGYLEVEL";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("ENERGYLEVEL"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petEnergyCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateTrainingDificultyComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT DIFFICULTYLEVEL FROM TRAININGDIFICULTY";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("DIFFICULTYLEVEL"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petTrainingCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populatePetTypeComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT PETTYPE FROM PETTYPE";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("PETTYPE"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petTypeCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populatePetBreedComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT BREED FROM BREED";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("BREED"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petBreedCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    // Method to populate the JComboBox
    private void populateLostCountryComboBox() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT COUNTRYNAME FROM COUNTRY";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("COUNTRYNAME"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petLostCountryCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateFoundCountryComboBox() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT COUNTRYNAME FROM COUNTRY";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("COUNTRYNAME"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petFoundCountryCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateLostProvinceComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT PROVINCENAME FROM PROVINCE";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("PROVINCENAME"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petLostProvinceCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateFoundProvinceComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT PROVINCENAME FROM PROVINCE";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("PROVINCENAME"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petFoundProvinceCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateLostCantonComboBox(String country, String province) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        CallableStatement callableStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Call the stored procedure
            callableStatement = connection.prepareCall("{call getCanton(?, ?, ?)}");
            callableStatement.setString(1, country);
            callableStatement.setString(2, province);
            callableStatement.registerOutParameter(3, OracleTypes.CURSOR);
            callableStatement.execute();

            // Get the result set
            resultSet = (ResultSet) callableStatement.getObject(3);

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("cantonname");
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petLostCantonCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (callableStatement != null) callableStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateFoundCantonComboBox(String country, String province) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        CallableStatement callableStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Call the stored procedure
            callableStatement = connection.prepareCall("{call getCanton(?, ?, ?)}");
            callableStatement.setString(1, country);
            callableStatement.setString(2, province);
            callableStatement.registerOutParameter(3, OracleTypes.CURSOR);
            callableStatement.execute();

            // Get the result set
            resultSet = (ResultSet) callableStatement.getObject(3);

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("cantonname");
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petFoundCantonCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (callableStatement != null) callableStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateLostDistrictComboBox(String country, String province, String canton) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        CallableStatement callableStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Call the stored procedure to retrieve the Districts
            callableStatement = connection.prepareCall("{call getDistrict(?, ?, ?, ?)}");
            callableStatement.setString(1, country);
            callableStatement.setString(2, province);
            callableStatement.setString(3, canton);
            callableStatement.registerOutParameter(4, OracleTypes.CURSOR);
            callableStatement.execute();

            // Get the result set
            resultSet = (ResultSet) callableStatement.getObject(4);

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("districtname");
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petLostDistrictCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (callableStatement != null) callableStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateFoundDistrictComboBox(String country, String province, String canton) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        CallableStatement callableStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Call the stored procedure to retrieve the Districts
            callableStatement = connection.prepareCall("{call getDistrict(?, ?, ?, ?)}");
            callableStatement.setString(1, country);
            callableStatement.setString(2, province);
            callableStatement.setString(3, canton);
            callableStatement.registerOutParameter(4, OracleTypes.CURSOR);
            callableStatement.execute();

            // Get the result set
            resultSet = (ResultSet) callableStatement.getObject(4);

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("districtname");
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petFoundDistrictCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (callableStatement != null) callableStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateCurrencyComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Establish a database connection
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");

            // Define your SQL query to retrieve data
            String sql = "SELECT CURRENCY FROM CURRENCY";

            // Prepare and execute the SQL query
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            // Add the retrieved data to the model
            while (resultSet.next()) {
                String item = resultSet.getString("CURRENCY"); // Replace with the actual column name
                model.addElement(item);
            }

            // Set the model for the JComboBox
            petFindingRewardCurrencyCBOX.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close database resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void petNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petNameTFActionPerformed

    private void petSubmitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petSubmitBTNActionPerformed
        // Text fields
        String petName = petNameTF.getText();
        String petChip = petChipTF.getText();
        String carnet = carnetTF.getText();
        String petSicknessTreatment  = petSicknessTreatmentTF.getText();
        
        // Spinners
        // pet size
        Object petSizeO = LpetSizeJSPINNER.getValue();
        String petSize = petSizeO.toString();
        // pet needed space
        Object petNeededSpaceO = LpetNeededSpaceJSPINNER.getValue();
        String petNeededSpace = petNeededSpaceO.toString();
        
        // pet finding reward
        Object petFindingRewardO = LpetFindingRewardJSPINNER.getValue();
        String petFindingReward = petFindingRewardO.toString();
        
        //combo boxes
        String petColor = petColorCBOX.getSelectedItem().toString();
        String petSeverity = petSeverityCBOX.getSelectedItem().toString();
        String petSickness = petSicknessCBOX.getSelectedItem().toString();
        String petEnergy = petEnergyCBOX.getSelectedItem().toString();
        String petTraining = petTrainingCBOX.getSelectedItem().toString();
        String petType = petTypeCBOX.getSelectedItem().toString();
        String petBreed = petBreedCBOX.getSelectedItem().toString();
        String petLostCountry = petLostCountryCBOX.getSelectedItem().toString();
        String petLostProvince = petLostProvinceCBOX.getSelectedItem().toString();
        String petLostCanton = petLostCantonCBOX.getSelectedItem().toString();
        String petLostDistrict = petLostDistrictCBOX.getSelectedItem().toString();
        String petFoundCountry = petFoundCountryCBOX.getSelectedItem().toString();
        String petFoundProvince = petFoundProvinceCBOX.getSelectedItem().toString();
        String petFoundCanton = petFoundCantonCBOX.getSelectedItem().toString();
        String petFoundDistrict = petFoundDistrictCBOX.getSelectedItem().toString();
        String petFindingRewardCurrency = petFindingRewardCurrencyCBOX.getSelectedItem().toString();
        
        //JCalendar
        //lost date
        Date selectedLostDate = petLostDateJC.getDate();
        // To display the selected date, you can format it as needed
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); 
        String formattedDate = dateFormat.format(selectedLostDate);
        System.out.println("Selected Lost Date: " + formattedDate);
        
        //file chooser
        //lost pet photo
        JFileChooser LostPetPhotoFC = new JFileChooser(); 
        int returnValuePet = LostPetPhotoFC.showOpenDialog(null);

        File selectedPetFile = null; // Initialize it to null

        if (returnValuePet == JFileChooser.APPROVE_OPTION) {
            selectedPetFile = LostPetPhotoFC.getSelectedFile();
        }

        FileInputStream petPhoto = null;

        if (selectedPetFile != null) {
            try {
                petPhoto = new FileInputStream(selectedPetFile);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        
        //Text area
        //notes
        String notes = LnotesTF.getText();
        String username = getUsername();
        int investment = 0;
        
        
        
        
        try {
            // Initialize your connection here (e.g., using DriverManager.getConnection)
            Connection connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:DBDAVID", "ge", "ge");
            
            
            // Call the PL/SQL procedure
            connection.setAutoCommit(false); //necessario
            
            String callStmt = "{call insertionLostPet(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}";
            CallableStatement callableStatement = connection.prepareCall(callStmt);
            callableStatement.setInt(1, 1);  // Set your parameter values accordingly
            callableStatement.setInt(2, Integer.parseInt(petTraining));
            callableStatement.setString(3, petType);
            callableStatement.setInt(4, Integer.parseInt(petEnergy));
            callableStatement.setInt(5, Integer.parseInt(petSeverity));
            callableStatement.setInt(6, Integer.parseInt(petChip));
            callableStatement.setString(7, petName);
            callableStatement.setString(8, petSize);
            callableStatement.setString(9, notes);
            callableStatement.setString(10, (petNeededSpace));
            callableStatement.setString(11, petBreed);
            callableStatement.setString(12, petColor);
            callableStatement.setString(13, username);
            callableStatement.setBinaryStream(14, petPhoto);
            callableStatement.setString(15, petLostCountry);
            callableStatement.setString(16, petLostProvince);
            callableStatement.setString(17, petLostCanton);
            callableStatement.setString(18, petLostDistrict);
            callableStatement.setDate(19, new java.sql.Date(selectedLostDate.getTime()));
            callableStatement.setInt(20, Integer.parseInt(petFindingReward));
            callableStatement.setString(21, petFindingRewardCurrency);
            callableStatement.setInt(22, Integer.parseInt(carnet));
            callableStatement.setInt(23, investment);
            
            // Execute the stored procedure
            callableStatement.execute();

            // Commit the transaction
            connection.commit();//
            
            System.out.println("done");
            // Close the CallableStatement and the Connection
            callableStatement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        
        
        this.dispose();
        
    }//GEN-LAST:event_petSubmitBTNActionPerformed

    private void petChipTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petChipTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petChipTFActionPerformed

    private void petColorCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petColorCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petColorCBOXActionPerformed

    private void petSeverityCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petSeverityCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petSeverityCBOXActionPerformed

    private void petSicknessCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petSicknessCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petSicknessCBOXActionPerformed

    private void petEnergyCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petEnergyCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petEnergyCBOXActionPerformed

    private void petTrainingCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petTrainingCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petTrainingCBOXActionPerformed

    private void petTypeCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petTypeCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petTypeCBOXActionPerformed

    private void petBreedCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petBreedCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petBreedCBOXActionPerformed

    private void petLostCountryCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petLostCountryCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petLostCountryCBOXActionPerformed

    private void petFoundCountryCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petFoundCountryCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petFoundCountryCBOXActionPerformed

    private void petFindingRewardCurrencyCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petFindingRewardCurrencyCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petFindingRewardCurrencyCBOXActionPerformed

    private void petLostProvinceCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petLostProvinceCBOXActionPerformed
        String lostSelectedCountry = petLostCountryCBOX.getSelectedItem().toString(); // Replace with the selected country
        String lostSelectedProvince = petLostProvinceCBOX.getSelectedItem().toString(); // Get the selected Province name

        // Call the stored procedure to retrieve the Cantons
        populateLostCantonComboBox(lostSelectedCountry, lostSelectedProvince);
    }//GEN-LAST:event_petLostProvinceCBOXActionPerformed

    private void petFoundProvinceCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petFoundProvinceCBOXActionPerformed
        String foundSelectedCountry = petFoundCountryCBOX.getSelectedItem().toString(); // Replace with the selected country
        String foundSelectedProvince = petFoundProvinceCBOX.getSelectedItem().toString(); // Get the selected Province name

        // Call the stored procedure to retrieve the Cantons
        populateFoundCantonComboBox(foundSelectedCountry, foundSelectedProvince);
    }//GEN-LAST:event_petFoundProvinceCBOXActionPerformed

    private void petLostCantonCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petLostCantonCBOXActionPerformed
        String lostSelectedCountry = petLostCountryCBOX.getSelectedItem().toString(); // Replace with the selected country
        String lostSelectedProvince = petLostProvinceCBOX.getSelectedItem().toString();
        String lostSelectedCanton = petLostCantonCBOX.getSelectedItem().toString(); // Assuming you have a Canton ComboBox

        // Call the stored procedure to populate the District ComboBox
        populateLostDistrictComboBox(lostSelectedCountry, lostSelectedProvince, lostSelectedCanton);
    }//GEN-LAST:event_petLostCantonCBOXActionPerformed

    private void petFoundCantonCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petFoundCantonCBOXActionPerformed
        String foundSelectedCountry = petFoundCountryCBOX.getSelectedItem().toString(); // Replace with the selected country
        String foundSelectedProvince = petFoundProvinceCBOX.getSelectedItem().toString();
        String foundSelectedCanton = petFoundCantonCBOX.getSelectedItem().toString(); // Assuming you have a Canton ComboBox

        // Call the stored procedure to populate the District ComboBox
        populateFoundDistrictComboBox(foundSelectedCountry, foundSelectedProvince, foundSelectedCanton);
    }//GEN-LAST:event_petFoundCantonCBOXActionPerformed

    private void petLostDistrictCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petLostDistrictCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petLostDistrictCBOXActionPerformed

    private void petFoundDistrictCBOXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petFoundDistrictCBOXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petFoundDistrictCBOXActionPerformed

    private void LostPetPhotoFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LostPetPhotoFCActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        // Show the file dialog to the user
        int returnVal = fileChooser.showOpenDialog(this);

        // Check if the user selected a file
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // Get the selected pet photo file
            selectedLostPetPhotoFile = fileChooser.getSelectedFile();
        } else {
            // The user canceled or closed the dialog
            selectedLostPetPhotoFile = null;
        }
    }//GEN-LAST:event_LostPetPhotoFCActionPerformed

    private void returnHomeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnHomeBTNActionPerformed
        this.dispose();
    }//GEN-LAST:event_returnHomeBTNActionPerformed

    private void carnetTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carnetTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_carnetTFActionPerformed

    private void petSicknessTreatmentTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petSicknessTreatmentTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petSicknessTreatmentTFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LostPetsFame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LostPetsFame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LostPetsFame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LostPetsFame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LostPetsFame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea LnotesTF;
    private javax.swing.JFileChooser LostPetPhotoFC;
    private javax.swing.JSpinner LpetFindingRewardJSPINNER;
    private javax.swing.JSpinner LpetNeededSpaceJSPINNER;
    private javax.swing.JSpinner LpetSizeJSPINNER;
    private javax.swing.JPanel PetTypePanel;
    private javax.swing.JTextField carnetTF;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> petBreedCBOX;
    private javax.swing.JTextField petChipTF;
    private javax.swing.JComboBox<String> petColorCBOX;
    private javax.swing.JComboBox<String> petEnergyCBOX;
    private javax.swing.JComboBox<String> petFindingRewardCurrencyCBOX;
    private javax.swing.JComboBox<String> petFoundCantonCBOX;
    private javax.swing.JComboBox<String> petFoundCountryCBOX;
    private javax.swing.JLabel petFoundDateLabel;
    private javax.swing.JComboBox<String> petFoundDistrictCBOX;
    private javax.swing.JComboBox<String> petFoundProvinceCBOX;
    private javax.swing.JComboBox<String> petLostCantonCBOX;
    private javax.swing.JComboBox<String> petLostCountryCBOX;
    private com.toedter.calendar.JDateChooser petLostDateJC;
    private javax.swing.JComboBox<String> petLostDistrictCBOX;
    private javax.swing.JComboBox<String> petLostProvinceCBOX;
    private javax.swing.JTextField petNameTF;
    private javax.swing.JComboBox<String> petSeverityCBOX;
    private javax.swing.JComboBox<String> petSicknessCBOX;
    private javax.swing.JTextField petSicknessTreatmentTF;
    private javax.swing.JButton petSubmitBTN;
    private javax.swing.JComboBox<String> petTrainingCBOX;
    private javax.swing.JComboBox<String> petTypeCBOX;
    private javax.swing.JButton returnHomeBTN;
    // End of variables declaration//GEN-END:variables
}
